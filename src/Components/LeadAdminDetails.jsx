import React, { useState } from 'react';
import {
  FaUser, FaBuilding, FaEnvelope, FaPhone, FaMapMarkerAlt,
  FaStar, FaCalendarAlt, FaRegCalendarAlt, FaClock, FaCalendarPlus, FaStickyNote,
  FaQuoteLeft, FaTimes
} from 'react-icons/fa';
import SelectSecondClosure from './SelectSecondClosure';

function LeadAdminDetails({ 
  selected, 
  users, 
  role, 
  setShowFollowUp, 
  showNotes, 
  setShowNotes 
}) {
  const [showSecondFollowUp, setShowSecondFollowUp] = useState(false);

  const renderStars = (rating) => {
    const stars = [];
    const full = Math.floor(rating || 0);
    const half = rating && rating % 1 >= 0.5;
    for (let i = 0; i < 5; i++) {
      if (rating && i < full) stars.push(<FaStar key={i} className="text-yellow-400 text-sm" />);
      else if (rating && i === full && half) stars.push(<FaStar key={i} className="text-yellow-400 opacity-50 text-sm" />);
      else stars.push(<FaStar key={i} className="text-gray-300 text-sm" />);
    }
    return (
      <div className="flex items-center gap-1 mt-1">
        {stars}
        {rating ? (
          <span className="text-xs text-gray-500 ml-1">({rating.toFixed(1)})</span>
        ) : null}
      </div>
    );
  };

  const formatDate = (date) => date || 'N/A';
  const formatTime = (time) => time || 'N/A';
  const formatDates = (date) => {
    if (!date) return 'N/A';
    const d = new Date(date);
    const day = d.getDate() + 1;
    const month = d.getMonth() + 1;
    const year = d.getFullYear();
    return `${day}/${month}/${year}`;
  };

  const getUserNameByEmail = (email) => {
    if (!email || email === 'not specified') return 'Not Assigned';
    const user = users.find(u => u.email === email);
    return user ? `${user.firstName} ${user.lastName}` : email;
  };

  const DetailItem = ({ icon, label, value }) => (
    <div className="flex items-start">
      <span className="mt-0.5 mr-3">{icon}</span>
      <div>
        <p className="text-xs text-gray-500 mb-0.5">{label}</p>
        <p className="text-sm font-medium text-gray-700 break-words">{value || '-'}</p>
      </div>
    </div>
  );

  const ActionButton = ({ onClick, icon, label, className, disabled }) => (
    <button
      onClick={disabled ? null : onClick}
      disabled={disabled}
      className={`flex-1 flex items-center justify-center gap-2 py-3 px-4 rounded-lg transition-all text-sm font-medium shadow-sm
        ${className} ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
      `}
    >
      {icon}
      {label}
    </button>
  );

  if (!selected) {
    return (
      <div className="h-full flex items-center justify-center text-gray-400">
        <p>Select a lead to view details</p>
      </div>
    );
  }

  return (
    <div className="flex-1 overflow-y-auto p-6 scrollbar-thin scrollbar-thumb-transparent scrollbar-track-transparent">
      <div className="flex justify-between items-start mb-5">
        <div>
          <div className="flex items-center gap-3 mb-2">
            <div className="w-10 h-10 rounded-full bg-gradient-to-br from-clr1 to-blue-500 flex items-center justify-center text-white">
              <FaUser className="text-lg" />
            </div>
            <div>
              <h2 className="flex flex-row gap-2 text-2xl font-bold text-gray-800">
                {selected.person_name} 
                <button onClick={() => setShowNotes(true)} className="flex items-center gap-1 text-gray-400 hover:text-clr1">
                  <FaStickyNote className='text-[1vw]' />
                </button>
              </h2>
              <p className="text-gray-500 flex items-center gap-1 text-[0.8vw]">
                <FaBuilding className="text-sm" />
                <span>{selected.business_name}</span>
              </p>
            </div>
          </div>
          {renderStars(selected.rating)}
          <div className="flex items-center gap-2 text-xs mt-1 text-gray-500">
            <FaRegCalendarAlt className="text-gray-400" />
            <span>{formatDates(selected.followupDate)}</span>
          </div>
        </div>
        <div className="text-right space-y-2">
          <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
            selected.status === 'won' ? 'bg-green-100 text-green-800' :
            selected.status === 'lost' ? 'bg-red-100 text-red-800' :
            'bg-blue-100 text-blue-800'
          }`}>
            {selected.status.toUpperCase()}
          </span>
            <p className="text-xs text-gray-500">Generated by: <span className="font-medium text-gray-700">{getUserNameByEmail(selected.email)}</span></p>
          <div className="flex items-center gap-2 text-xs text-gray-500 justify-end">
            <FaCalendarAlt className="text-gray-400" />
            <span>{formatDate(selected.date)}</span>
          </div>
          <div className="flex items-center gap-2 text-xs text-gray-500 justify-end">
            <FaClock className="text-gray-400" />
            <span>{formatTime(selected.time)}</span>
          </div>
          <div className="flex flex-col text-xs text-gray-500 mt-1">
            <div className="flex items-center gap-2 justify-end">
              <span className="font-medium text-gray-500">Closure 1:</span>
              <span>{getUserNameByEmail(selected.closure1)}</span>
            </div>
            <div className="flex items-center gap-2 justify-end">
              <span className="font-medium text-gray-500">Closure 2:</span>
              <span>{getUserNameByEmail(selected.closure2)}</span>
            </div>
          </div>
        </div>
      </div>

      <div className="space-y-5 mt-[-2vw]">
        <div className="space-y-4">
          <h3 className="font-semibold text-gray-700 flex items-center gap-2 text-base border-b pb-2">
            <FaEnvelope className="text-clr1" />
            Contact Information
          </h3>
          <div className="grid grid-cols-2 gap-4">
            <DetailItem icon={<FaEnvelope className="text-gray-400" />} label="Email" value={selected.personal_email} />
            <DetailItem icon={<FaPhone className="text-gray-400" />} label="Phone" value={selected.contact} />
          </div>
        </div>
        <div className="space-y-4">
          <h3 className="font-semibold text-gray-700 flex items-center gap-2 text-base border-b pb-2">
            <FaBuilding className="text-clr1" />
            Business Information
          </h3>
          <div className="grid grid-cols-2 gap-4">
            <DetailItem icon={<FaEnvelope className="text-gray-400" />} label="Business Email" value={selected.business_email} />
            <DetailItem icon={<FaPhone className="text-gray-400" />} label="Business Phone" value={selected.business_contact} />
            <DetailItem icon={<FaMapMarkerAlt className="text-gray-400" />} label="Address" value={selected.business_address} />
            <DetailItem icon={<FaCalendarAlt className="text-gray-400" />} label="Follow-up Date" value={selected.followupDate ? selected.followupDate.slice(0, 10) : '-'} />
          </div>
        </div>
      </div>

      {role === 1 && (
        <div className="mt-6 flex justify-between gap-3">
          <ActionButton
            onClick={() => setShowFollowUp(true)}
            className="bg-white text-clr1 border border-clr1 hover:text-white hover:bg-clr1"
            icon={<FaCalendarPlus className="text-lg" />}
            label="Assign Closure 1"
            disabled={selected?.status === 'won' || selected?.status === 'lost'}
          />
          <ActionButton
            onClick={() => setShowSecondFollowUp(true)}
            className="bg-white text-blue-500 border border-blue-500 hover:text-white hover:bg-blue-500"
            icon={<FaCalendarPlus className="text-lg" />}
            label="Assign Closure 2"
            disabled={selected?.status === 'won' || selected?.status === 'lost'}
          />
        </div>
      )}

      {showNotes && (
        <div className="fixed inset-0 bg-black/40 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-2xl w-full max-w-md mx-4 p-5">
            <div className="flex justify-between items-center border-b pb-3 mb-4">
              <div className="flex items-center gap-2 text-clr1">
                <FaStickyNote className="text-lg" />
                <h3 className="text-base font-semibold text-gray-800">
                  {selected.lead_gen || 'LeadGen'}'s Notes on this Client
                </h3>
              </div>
              <button
                onClick={() => setShowNotes(false)}
                className="text-gray-400 hover:text-clr1 transition"
              >
                <FaTimes size={16} />
              </button>
            </div>

            <div className="text-sm text-gray-700 whitespace-pre-line leading-relaxed bg-gray-50 p-4 rounded-lg border">
              {selected.notes ? (
                <>
                  <FaQuoteLeft className="text-gray-300 inline-block mr-2 mb-1" />
                  {selected.notes}
                </>
              ) : (
                <p className="italic text-gray-400">No notes available</p>
              )}
            </div>
          </div>
        </div>
      )}

      {showSecondFollowUp && (
        <SelectSecondClosure
          selected={selected}
          onClose={() => setShowSecondFollowUp(false)}
        />
      )}
    </div>
  );
}

export default LeadAdminDetails;